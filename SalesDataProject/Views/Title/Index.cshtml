@inject Microsoft.AspNetCore.Http.IHttpContextAccessor HttpContextAccessor
@{
    var canAccessTitle = ViewData["CanViewTitles"]?.ToString();
    var canDeleteTitle = ViewData["CanDeleteTitles"]?.ToString();
    ViewBag.CanAccessTitle = "True";
    ViewBag.CanDeleteTitle = "True";
}

@model ValidationResultViewModel

<div class="container mt-5">
    <!-- Title Section -->
    <div class="header d-flex justify-content-between align-items-center p-4 bg-white shadow rounded mb-4">
        <h2 class="text-primary m-0 text-center flex-grow-1 fw-bold"><i>Title Validation</i></h2>

        @if (!string.IsNullOrEmpty(canAccessTitle) && canAccessTitle == "True")
        {
            <div class="d-flex gap-3">
                <form asp-action="ViewTitles" method="get">
                    <button type="submit" class="btn btn-warning fw-bold px-4 shadow-sm">
                        <i class="bi bi-eye"></i> View Titles
                    </button>
                </form>
                <a href="@Url.Action("Index", "Home")">
                    <button type="button" class="btn fw-bold px-4 shadow-sm" style="background-color: red; color: white;">
                        <i class="bi bi-arrow-left-circle"></i> Back
                    </button>
                </a>
            </div>
        }
    </div>

    <!-- Upload and Download Section -->
    <div class="card shadow rounded mb-4">
        <div class="card-body d-flex justify-content-between align-items-center">
            <h4 class="text-danger fw-bold"><i>Upload Titles</i></h4>
            <div class="d-flex gap-3">
                <!-- Upload Excel -->
                <form asp-action="UploadExcel" method="post" enctype="multipart/form-data" id="uploadForm">
                    <input type="file" id="fileUpload" name="file" class="d-none" required />
                    <button type="button" id="uploadButton" class="btn btn-primary fw-bold px-4 shadow-sm">
                        <i class="bi bi-upload"></i> Upload Excel
                    </button>
                </form>
                <!-- Download Template -->
                <form>
                    <button type="submit" class="btn btn-success fw-bold px-4 shadow-sm" id="downloadBtn">
                        <i class="bi bi-file-earmark-arrow-down"></i> Download Template
                    </button>
                </form>
            </div>
        </div>
    </div>

    <!-- Validation Results Section -->
    @if (Model != null && (Model.BlockedTitles != null || Model.CleanTitles != null || Model.DuplicateTitlesInExcel != null))
    {
        <div class="card shadow rounded mb-4">
            <div class="card-body">
                <h5 class="card-title text-dark fw-bold"><i class="bi bi-check-circle"></i> Validation Results</h5>
                <div class="table-responsive" style="max-height: 600px; overflow-y: auto;">
                    <table class="table table-hover align-middle table-bordered">
                        <thead class="table-dark text-center">
                            <tr>
                                <th>Row No</th>
                                <th>Invoice No</th>
                                <th>CodeRef</th>
                                <th>Title</th>
                                <th>Status</th>
                                <th>BlockedBy</th>
                                <th>BlockInvoiceNo</th>
                                <th>BlockCodeRef</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var title in Model.CleanTitles)
                            {
                                <tr class="table-success text-center">
                                    <td>@title.RowNumber</td>
                                    <td>@title.InvoiceNumber</td>
                                    <td>@title.CodeReference</td>
                                    <td>@title.Title</td>
                                    <td>@title.Status</td>
                                    <td>-</td>
                                    <td>@(title.BlockedByInvoiceNo ?? "-")</td>
                                    <td>@(title.BlockedCodeRef ?? "-")</td>
                                </tr>
                            }
                            @foreach (var title in Model.BlockedTitles)
                            {
                                <tr class="table-warning text-center">
                                    <td>@title.RowNumber</td>
                                    <td>@title.InvoiceNumber</td>
                                    <td>@title.CodeReference</td>
                                    <td>@title.Title</td>
                                    <td>@title.Status</td>
                                    <td>@title.BlockedId</td>
                                    <td>@(title.BlockedByInvoiceNo ?? "-")</td>
                                    <td>@(title.BlockedCodeRef ?? "-")</td>
                                </tr>
                            }
                            @foreach (var title in Model.DuplicateTitlesInExcel)
                            {
                                <tr class="table-danger text-center">
                                    <td>@title.RowNumber</td>
                                    <td>@title.InvoiceNumber</td>
                                    <td>@title.CodeReference</td>
                                    <td>@title.Title</td>
                                    <td>@title.Status</td>
                                    <td>@title.BlockedId</td>
                                    <td>@(title.BlockedByInvoiceNo ?? "-")</td>
                                    <td>@(title.BlockedCodeRef ?? "-")</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    }
</div>

<script>
    document.addEventListener('DOMContentLoaded', function () {
        const uploadButton = document.getElementById('uploadButton');
        const fileUpload = document.getElementById('fileUpload');
        const uploadForm = document.getElementById('uploadForm');

        if (uploadButton && fileUpload && uploadForm) {

            uploadButton.addEventListener('click', function () {
                fileUpload.click();
            });

            fileUpload.addEventListener('change', function () {
                if (fileUpload.files.length > 0) {
                    showSpinner(); // Show loader
                    uploadForm.submit();
                }
            });
        }
    });

    function showSpinner() {
        document.getElementById("spinner-overlay").style.display = "flex";
    }

    function hideSpinner() {
        document.getElementById("spinner-overlay").style.display = "none";
    }

    // Hide the loader when the page is fully loaded (after form submission)
    window.addEventListener('load', function () {
        hideSpinner();
    });
</script>

<style>
    /* General Styling */
    body {
        background-color: #f8f9fa;
    }

    h1 {
        font-family: 'Roboto', sans-serif;
        font-weight: 700;
    }

    .btn-lg {
        padding: 0.8rem 1.5rem;
        font-size: 1.1rem;
        border-radius: 8px;
    }

    .card {
        border-radius: 10px;
    }

    .alert {
        border-radius: 10px;
    }

    .table {
        border-radius: 10px;
        overflow: hidden;
    }

    .table-hover tbody tr:hover {
        background-color: lightblue;
    }

    .table-success {
        background-color: #eafaf1;
    }

    .table-danger {
        background-color: #ddd;
    }

    .btn-outline-primary:hover {
        background-color: #0056b3;
        color: white;
    }

    .btn-outline-success:hover {
        background-color: #218838;
        color: white;
    }
</style>

<style>
    .error-message.collor {
        background-color: greenyellow;
    }

    #categorySelectDropdown {
        border: 2px solid green;
    }
</style>

<script>
    document.addEventListener("DOMContentLoaded", function () {
        // Get the download button
        const downloadBtn = document.getElementById("downloadBtn");
        if (!downloadBtn) {
            console.error("Download button not found in the DOM.");
            return;
        }

        downloadBtn.addEventListener("click", function (event) {
            // Prevent any default behavior (e.g., if inside a form)
            event.preventDefault();

            // Get the spinner element
            const spinner = document.getElementById("spinner-overlay");
            if (!spinner) {
                console.error("Spinner overlay element not found!");
                return;
            }

            // Show the loader
            spinner.style.display = "flex";

            // Fetch the file from the server
            fetch('/SalesData/DownloadTemplate', { method: 'GET', cache: 'no-store' })
                .then(response => {
                    if (!response.ok) {
                        throw new Error("Server responded with " + response.status);
                    }
                    return response.blob(); // Convert response to Blob
                })
                .then(blob => {
                    // Hide the loader
                    spinner.style.display = "none";

                    // Create a temporary link element to trigger the download
                    const link = document.createElement("a");
                    link.href = window.URL.createObjectURL(blob);
                    link.download = "UploadTitles.xlsx"; // Set the file name
                    document.body.appendChild(link);
                    link.click(); // Trigger the download
                    document.body.removeChild(link); // Clean up the temporary link
                })
                .catch(error => {
                    // Hide the loader if an error occurs
                    spinner.style.display = "none";
                    console.error("Error downloading file:", error);
                    alert("Error downloading file: " + error.message);
                });
        });
    });
</script>

<script>
        function closeAlertMessage() {
        const alertMessage = document.getElementById('alertMessage');
        if (alertMessage) {
            alertMessage.classList.add('fade-out');
            setTimeout(() => alertMessage.style.display = 'none', 500); // Wait for fade-out to complete
        }
    }
    setTimeout(closeAlertMessage, 3500);
</script>
