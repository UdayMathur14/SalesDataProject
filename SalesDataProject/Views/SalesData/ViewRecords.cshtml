@model SalesDataProject.Models.UploadResultViewModel
@{
    ViewData["Title"] = "View Records";
}

@if (TempData["message"] != null)
{
    <div class="error-message" id="errorMessage">
        <p>@TempData["message"]</p>
    </div>
}
@if (TempData["messagesuccess"] != null)
{
    <div class="error-message collor" id="errorMessage">
        <p>@TempData["messagesuccess"]</p>
    </div>
}
<div class="container mt-4">
    <div class="header d-flex justify-content-between align-items-center mb-3">
        <h4 class="mb-3 " style="color:green"><i>UPLOAD MAILING DATA</i></h4>
        <div class="buttons d-flex gap-3">
            
            <form asp-action="UploadSalesData" method="post" enctype="multipart/form-data" id="uploadForm">
                <input type="hidden" id="categorySelectHidden" name="selectedCategory" value="" /> <!-- Hidden input for category -->
                <input type="file" id="fileUpload" name="file" class="form-control-file" required style="display: none;" />
                <button type="button" id="uploadButton" class="btn btn-outline-primary">Upload Excel</button>
            </form>
            <form asp-action="DownloadTemplate" method="get">
                <button type="submit" class="btn btn-outline-success">Download Template</button>
            </form>
            <a href="@Url.Action("Index", "Home")" class="">
                <button style="background-color:red;width:4px" type="submit" class="btn btn-success">Back</button>
            </a>
        </div>
    </div>

    <div class="header card shadow-sm p-4 mb-5">
        <h4 class="mb-3" style="color:darkblue"><i>VIEW MAILING DATA</i></h4>
        <form asp-action="ViewRecord" method="post">
            <div class="row g-3">
                <div class="col-md-3">
                    <div class="form-group">
                        <label for="SelectedDate" class="form-label">Select Date:</label>
                        <input asp-for="SelectedDate" class="form-select form-control-sm" type="date" placeholder="Choose a date" onfocus="this.showPicker()" />
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="form-group">
                        <label for="RecordType" class="form-label">Select Record Type:</label>
                        <select asp-for="RecordType" class="form-select form-control-sm">
                            <option value="">--Select--</option>
                            <option value="Blocked">Blocked</option>
                            <option value="Clean">Clean</option>
                        </select>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="form-group">
                        <label for="Category" class="form-label">Select Category:</label>
                        <select asp-for="Category" class="form-select form-control-sm">
                            <option value="">--Select--</option>
                            <option value="UNIVERSITY">University</option>
                            <option value="SME">SME</option>
                            <option value="CORPORATE">Corporate</option>
                            <option value="LAWFIRM">Law Firm</option>
                            <option value="PCT">PCT</option>
                        </select>
                    </div>
                </div>
                <div class="col-md-2 d-flex align-items-end">
                    <button type="submit" class="btn btn-primary w-100">
                        <i class="bi bi-filter"></i> Search
                    </button>
                </div>
            </div>
        </form>
    </div>

    <div class="card shadow-sm p-4">
        @if (Model.BlockedCustomers != null && Model.BlockedCustomers.Any())
        {
            <h4 class="mb-3 text-danger">Blocked Customers</h4>
            <div style="max-height: 500px; overflow-y: auto; border: 1px solid #ddd; border-radius: 5px;">
            <table class="table table-striped table-hover table-header">
                <thead class="table-danger ">
                    <tr>
                        <th>Category</th>
                        <th>Company Name</th>
                        <th>Email</th>
                        <th>Contact Number</th>
                        <th>Blocked Date</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var customer in Model.BlockedCustomers)
                    {
                        <tr>
                            <td>@customer.CATEGORY</td>
                            <td>@customer.COMPANY_NAME</td>
                            <td>@customer.CUSTOMER_EMAIL</td>
                            <td>@customer.CUSTOMER_CONTACT_NUMBER1</td>
                            <td>@customer.CREATED_ON</td>
                        </tr>
                    }
                </tbody>
            </table>
            </div>
        }
        @if (Model.CleanCustomers != null && Model.CleanCustomers.Any())
        {
            <h4 class="mb-3 text-success">Clean Customers</h4>
            <div style="max-height: 200px; overflow-y: auto; border: 1px solid #ddd; border-radius: 5px;">
            <table class="table table-striped table-hover table-header">
                <thead class="table-success">
                    <tr>
                        <th>Category</th>
                        <th>Company Name</th>
                        <th>Email</th>
                        <th>Contact Number</th>
                        <th>Created Date</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var customer in Model.CleanCustomers)
                    {
                        <tr>
                            <td>@customer.CATEGORY</td>
                            <td>@customer.COMPANY_NAME</td>
                            <td>@customer.CUSTOMER_EMAIL</td>
                            <td>@customer.CUSTOMER_CONTACT_NUMBER1</td>
                            <td>@customer.CREATED_ON</td>
                        </tr>
                    }
                </tbody>
            </table>
            </div>
        }
    </div>
</div>





<script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@4.5.2/dist/js/bootstrap.bundle.min.js"></script>
<script>
    $(document).ready(function () {
        if ($("#successAlert").length) {
            setTimeout(function () {
                $("#successAlert").alert('close');
            }, 2500);
        }

        // Optionally, hide buttons if no checkboxes are selected
        $("input[type='checkbox']").change(function () {
            var anyChecked = $("input[type='checkbox']:checked").length > 0;
            $(".btn-danger, .btn-success").prop("disabled", !anyChecked);
        });
    });
</script>


<script>
    document.addEventListener('DOMContentLoaded', function () {
        const uploadButton = document.getElementById('uploadButton');
        const fileUpload = document.getElementById('fileUpload');
        const uploadForm = document.getElementById('uploadForm');
        /* const categorySelectDropdown = document.getElementById('categorySelectDropdown'); */ // Category dropdown
        /* const hiddenCategoryInput = document.getElementById('categorySelectHidden'); */ // Hidden input for category

        if (uploadButton && fileUpload && uploadForm ) {

            // Set hidden category input value when category changes
            // categorySelectDropdown.addEventListener('change', function () {
            //     hiddenCategoryInput.value = categorySelectDropdown.value;
            //     // Reset border color if category is selected
            //     categorySelectDropdown.style.borderColor = '';
            // });

            uploadButton.addEventListener('click', function () {
                // Check if category is selected
                
                    // Proceed with file upload if category is selected
                    fileUpload.click();
                
            });

            fileUpload.addEventListener('change', function () {
                if (fileUpload.files.length > 0) {
                    // Submit the form only if a file is uploaded
                    uploadForm.submit();
                }
            });
        }
    });
</script>


<style>
    body {
        background-color: #f8f9fa;
    }

    .header {
        background-color: #ffffff;
        padding: 15px;
        border-radius: 5px;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
    }

    .card {
        border: none;
        border-radius: 8px;
        background: #ffffff;
    }

    .table {
        border-radius: 8px;
        overflow: hidden;
    }

        .table thead th {
            background-color: #e9ecef;
            color: #495057;
        }

    .btn {
        border-radius: 25px;
    }

    .form-control-sm {
        border-radius: 5px;
    }

    .buttons .btn {
        min-width: 150px;
    }

    h4 {
        font-weight: bold;
    }
</style>
<style>
    .error-message {
        position: fixed;
        top: 20px;
        right: 20px;
        background-color: red; /* Softer red for a less intense tone */
        color: black;
        padding: 10px 12px;
        border-radius: 8px;
        font-size: 16px;
        font-weight: 500;
        box-shadow: 0 8px 16px rgba(0, 0, 0, 0.3);
        z-index: 1000;
        transition: opacity 0.4s ease-out;
        opacity: 0.95;
    }

        .error-message.collor {
            background-color: greenyellow;
        }

    #categorySelectDropdown {
        border: 2px solid green;
    }
</style>

<script>
    // Automatically hide the error message after 5 seconds
    setTimeout(() => {
        const errorMessage = document.getElementById('errorMessage');
        if (errorMessage) {
            errorMessage.style.display = 'none';
        }
    }, 2500);
</script>
