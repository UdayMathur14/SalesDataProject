@{
    Layout = null;
}
@{
    ViewData["Title"] = "Login";
}
<!-- Views/Auth/Login.cshtml -->
@model SalesDataProject.Models.AuthenticationModels.User
@if (TempData["Message"] != null)
{
    <div class="alert-message @(TempData["MessageType"] == "Error" ? "error" : "success")" id="alertMessage" role="alert">
        <p>@TempData["Message"]</p>
        <button class="close-btn" onclick="closeAlertMessage()">×</button>
    </div>
}

<div style="display: flex; overflow: hidden !important; height: 100%">
    <!-- First Div for Image or Background -->
    <div style="width:50vw; height: 98vh; display: flex;">
        <!-- You can add an image or content here if needed -->
        <img src="~/images/bd.webp" style="width:50vw;border-radius:5px">
    </div>

    <!-- Second Div for the Form -->
    <div style="width: 50vw; display: flex; align-items: center; justify-content: center;">
        <form asp-action="Login" method="post" class="form-group" style="display:flex; flex-direction:column;align-items:center">
            <h1>Login</h1>
            <p>Welcome back, Please login to your account!</p>
            <img src="Images/Billlogo.png" style="height:200px; width:300px;" />
            <div style="margin-bottom: 15px;width:270px;display:flex;justify-content:space-between;align-items:center;" class="form-group">
                <label style="">Username</label>
                <input type="text" asp-for="Username" placeholder="Enter User Id" class="input-field p-3" style="padding-block:8px; padding-inline:12px; border-radius:15px;border:1px solid black" />
            </div>
            <div style="margin-bottom: 15px; width:270px;display:flex;justify-content:space-between;align-items:center" class="form-group">
                <label style="">Password</label>
                <input type="password" asp-for="Password" placeholder="Enter Password" class="input-field p-3" style="padding-block:8px; padding-inline:12px; border-radius:15px;border:1px solid black" />
            </div>
            <button class="custom-button" type="submit">Sign In</button>
        </form>
    </div>
</div>

<style>
    .custom-button {
        padding-block: 10px;
        padding-inline: 18px;
        border-radius: 30px;
        background-color: orange;
        border: none;
        color: black;
        font-size: 1rem;
        transition: background-color 0.3s ease;
    }

        .custom-button:hover {
            background-color: darkgray; /* Change this to any color you like */
        }

</style>

<style>
    .alert-message {
        position: fixed;
        top: 20px;
        right: 20px;
        color: #ffffff;
        padding: 12px 16px; /* Ensure equal padding */
        border-radius: 8px;
        font-size: 16px;
        font-weight: 500;
        box-shadow: 0 8px 16px rgba(0, 0, 0, 0.3);
        z-index: 1000;
        opacity: 1;
        display: flex; /* Ensures items (text + button) align properly */
        align-items: center; /* Vertically centers text and button */
        justify-content: space-between; /* Pushes text left, button right */
        transition: opacity 0.5s ease-out, transform 0.3s ease-in-out;
        transform: translateY(0);
        min-width: 250px; /* Ensures width consistency */
        max-width: 400px;
    }

        .alert-message p {
            margin: 0; /* Removes extra spacing */
            flex-grow: 1; /* Allows text to take available space */
        }

        .alert-message.fade-out {
            opacity: 0;
            transform: translateY(-20px);
        }

    .error {
        background-color: #d32f2f; /* Red for error */
    }

    .success {
        background-color: #4CAF50; /* Green for success */
    }

    .close-btn {
        background: transparent;
        border: none;
        color: #fff;
        font-size: 20px;
        cursor: pointer;
        margin-left: 10px;
        padding: 0 5px; /* Ensures button size consistency */
    }

</style>

<script>
    function showSpinner() {
        let overlay = document.getElementById("spinner-overlay");
        overlay.style.display = "flex"; // Show overlay

        setTimeout(() => {
            overlay.style.display = "none"; // Hide after 3 seconds
        }, 3000);
    }
</script>
<script>
        function closeAlertMessage() {
        const alertMessage = document.getElementById('alertMessage');
        if (alertMessage) {
            alertMessage.classList.add('fade-out');
            setTimeout(() => alertMessage.style.display = 'none', 500); // Wait for fade-out to complete
        }
    }
    setTimeout(closeAlertMessage, 2500);
</script>